# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from vampyro import *
import random

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / "build" / "assets" / "frame0"


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def gerar_ficha_completa():
    entry_3.delete("1.0", "end")  # Limpa o campo de texto

    # Obtém os valores dos campos de entrada
    nome = entry_1.get().strip().title()
    cla = entry_2.get().strip().title()

    # Define valores padrão caso os campos estejam vazios
    if not nome:
        nome = "Indigente"
    if not cla:
        cla = random.choice(list(lista_cla.keys()))
    if cla not in lista_cla:
        # Exibe a lista de clãs no campo de texto
        entry_3.insert("1.0", "Clã inválido! Escolha um dos seguintes clãs:\n\n")
        for cl in lista_cla.keys():
            entry_3.insert("end", f"- {cl}\n")
        return  # Sai da função sem continuar

    # Cria o objeto Vampiro usando a classe
    vampiro = Vampiro(nome=nome, cla=cla)

    # Exibe os dados do Vampiro na GUI
    entry_3.insert("1.0", f"Nome: {vampiro.nome}\nClã: {vampiro.cla}\nGeração: {vampiro.geracao}\n\n")
    entry_3.insert("end", "Atributos:\n")
    for categoria, atributos in vampiro.atributos.items():
        entry_3.insert("end", f"\n{categoria.capitalize()}:\n")
        atributos_lista = list(atributos.items())
        for i in range(0, len(atributos_lista), 3):
            linha = atributos_lista[i:i+3]
            linha_formatada = " | ".join(f"{atributo.capitalize()}: {valor}" for atributo, valor in linha)
            entry_3.insert("end", f"{linha_formatada}\n")

    entry_3.insert("end", "\nHabilidades:\n")
    for categoria, habilidades in vampiro.habilidades.items():
        habilidades_filtradas = {k: v for k, v in habilidades.items() if v > 0}
        if habilidades_filtradas:
            entry_3.insert("end", f"\n{categoria.capitalize()}:\n")
            habilidades_lista = list(habilidades_filtradas.items())
            for i in range(0, len(habilidades_lista), 3):
                linha = habilidades_lista[i:i+3]
                linha_formatada = " | ".join(f"{habilidade.capitalize()}: {valor}" for habilidade, valor in linha)
                entry_3.insert("end", f"{linha_formatada}\n")

    entry_3.insert("end", "\nAntecedentes:\n")
    antecedentes_filtrados = {k: v for k, v in vampiro.antecedentes.items() if v > 0}
    if antecedentes_filtrados:
        antecedentes_lista = list(antecedentes_filtrados.items())
        for i in range(0, len(antecedentes_lista), 3):
            linha = antecedentes_lista[i:i+3]
            linha_formatada = " | ".join(f"{antecedente.capitalize()}: {valor}" for antecedente, valor in linha)
            entry_3.insert("end", f"{linha_formatada}\n")

    entry_3.insert("end", "\nVirtudes:\n")
    virtudes_lista = list(vampiro.virtudes.items())
    for i in range(0, len(virtudes_lista), 3):
        linha = virtudes_lista[i:i+3]
        linha_formatada = " | ".join(f"{virtude.capitalize()}: {valor}" for virtude, valor in linha)
        entry_3.insert("end", f"{linha_formatada}\n")

    entry_3.insert("end", "\nQualidades e Defeitos:\n")
    qed_lista = list(vampiro.qed.items())
    for i in range(0, len(qed_lista), 3):
        linha = qed_lista[i:i+3]
        linha_formatada = " | ".join(f"{qed.capitalize()}: {valor}" for qed, valor in linha)
        entry_3.insert("end", f"{linha_formatada}\n")

    entry_3.insert("end", "\nDisciplinas:\n")
    disciplinas_lista = list(vampiro.disciplinas.items())  # Remove o filtro para exibir todas as disciplinas
    for i in range(0, len(disciplinas_lista), 3):
        linha = disciplinas_lista[i:i+3]
        linha_formatada = " | ".join(f"{disciplina.capitalize()}: {valor}" for disciplina, valor in linha)
        entry_3.insert("end", f"{linha_formatada}\n")

    entry_3.insert("end", f"\nHumanidade: {vampiro.humanidade}\n")
    entry_3.insert("end", f"Força de Vontade: {vampiro.forca_de_vontade}\n")
    entry_3.insert("end", f"Pontos de Sangue: {vampiro.pontos_de_sangue}\n")

def copiar_para_area_de_transferencia():
    # Obtém o texto do campo de texto
    texto = entry_3.get("1.0", "end").strip()
    if texto:  # Verifica se há texto para copiar
        window.clipboard_clear()  # Limpa a área de transferência
        window.clipboard_append(texto)  # Adiciona o texto à área de transferência
        window.update()  # Atualiza a área de transferência

window = Tk()

window.title("VamPYro")
window.geometry("845x480")
window.configure(bg = "#292929")


canvas = Canvas(
    window,
    bg = "#292929",
    height = 480,
    width = 845,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    845.0,
    58.0,
    fill="#500B0B",
    outline="")

canvas.create_text(
    729.0,
    10.0,
    anchor="nw",
    text="Créditos",
    fill="#BC0000",
    font=("Inter SemiBoldItalic", 10 * -1)
)

canvas.create_text(
    21.0,
    8.0,
    anchor="nw",
    text="VamPYro",
    fill="#CDCDCD",
    font=("Inter SemiBoldItalic", 24 * -1)
)

canvas.create_text(
    21.0,
    77.0,
    anchor="nw",
    text="Nome",
    fill="#FFFFFF",
    font=("Inter SemiBoldItalic", 15 * -1)
)

canvas.create_text(
    21.0,
    165.0,
    anchor="nw",
    text="Clã",
    fill="#FFFFFF",
    font=("Inter SemiBoldItalic", 15 * -1)
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    95.0,
    121.0,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=21.0,
    y=102.0,
    width=148.0,
    height=36.0
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    95.0,
    227.0,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=21.0,
    y=208.0,
    width=148.0,
    height=36.0
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    515.0,
    264.0,
    image=entry_image_3
)
entry_3 = Text(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=283.0,
    y=61.0,
    width=464.0,
    height=404.0
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=gerar_ficha_completa,  # Chama a função ao clicar
    relief="flat"
)
button_1.place(
    x=44.0,
    y=271.0,
    width=77.0,
    height=23.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=copiar_para_area_de_transferencia,  # Chama a função de copiar
    relief="flat"
)
button_2.place(
    x=757.0,
    y=444.0,
    width=77.0,
    height=23.0
)

window.resizable(False, False)
window.mainloop()